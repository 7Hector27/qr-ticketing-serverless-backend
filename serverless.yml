service: qr-ticketing
frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev

  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3000
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowedHeaders:
        - Content-Type
        - Authorization
      allowCredentials: true

  environment:
    USERS_TABLE: Users
    EVENTS_TABLE: Events
    TICKETS_TABLE: Tickets
    S3_BUCKET: ${self:service}-${self:provider.stage}-uploads
    JWT_SECRET: ${ssm:/aws/reference/secretsmanager/qr-ticketing-jwt}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
            - ses:SendEmail
            - ses:SendRawEmail
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/Users
            - arn:aws:dynamodb:${self:provider.region}:*:table/Users/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/Events
            - arn:aws:dynamodb:${self:provider.region}:*:table/Events/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/Tickets
            - arn:aws:dynamodb:${self:provider.region}:*:table/Tickets/index/*
            - arn:aws:ses:us-east-1:859493432159:identity/Virus_714@yahoo.com
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            - arn:aws:s3:::${self:service}-${self:provider.stage}-uploads/*
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:service}-${self:provider.stage}-uploads

functions:
  getUsers:
    handler: handlers/users/getUsers.main
    events:
      - httpApi:
          path: /users
          method: GET
    package:
      patterns:
        - handlers/users/getUsers.ts
        - utils/**

  createUser:
    handler: handlers/users/createUser.main
    events:
      - httpApi:
          path: /users
          method: POST
    package:
      patterns:
        - handlers/users/createUser.ts
        - utils/**

  loginUser:
    handler: handlers/users/loginUser.main
    events:
      - httpApi:
          path: /login
          method: POST
    package:
      patterns:
        - handlers/users/loginUser.ts
        - utils/**

  getAuthenticatedUser:
    handler: handlers/users/auth/getAuthenticatedUser.main
    events:
      - httpApi:
          path: /users/auth
          method: GET
    package:
      patterns:
        - handlers/users/auth/getAuthenticatedUser.ts
        - utils/**

  createEvent:
    handler: handlers/events/createEvent.main
    events:
      - httpApi:
          path: /events
          method: POST
    package:
      patterns:
        - handlers/events/createEvent.ts
        - utils/**

  getEvents:
    handler: handlers/events/getEvents.main
    events:
      - httpApi:
          path: /events
          method: GET
    package:
      patterns:
        - handlers/events/getEvents.ts
        - utils/**

  getEventById:
    handler: handlers/events/getEventById.main
    events:
      - httpApi:
          path: /events/{id}
          method: GET
    package:
      patterns:
        - handlers/events/getEventById.ts
        - utils/**

  getUploadUrl:
    handler: handlers/uploads/getUploadUrl.main
    events:
      - httpApi:
          path: /uploads/url
          method: POST
    package:
      patterns:
        - handlers/uploads/getUploadUrl.ts
        - utils/**

  testSendTicket:
    handler: handlers/tickets/testSendTicket.main
    events:
      - httpApi:
          path: /tickets/test
          method: POST
    package:
      patterns:
        - handlers/tickets/testSendTicket.ts
        - utils/**

resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - http://localhost:3000
              AllowedMethods:
                - GET
                - PUT
                - HEAD
              AllowedHeaders:
                - "*"
              ExposedHeaders:
                - ETag
              MaxAge: 3000

package:
  individually: true
  patterns:
    - "!node_modules/**"
    - "!package-lock.json"
    - "!yarn.lock"
    - "!tests/**"
    - "!docs/**"
    - "!coverage/**"
    - "!README.md"
    - "!public/**"
    - "!src/**" # exclude frontend if you colocated it
    - "!.next/**"
    - "!.git/**"
    - "!.vscode/**"
