service: qr-ticketing
frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev

  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:3000
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowedHeaders:
        - Content-Type
        - Authorization
      allowCredentials: true

  environment:
    USERS_TABLE: Users
    EVENTS_TABLE: Events
    TICKETS_TABLE: Tickets
    S3_BUCKET: ${self:service}-${self:provider.stage}-uploads
    JWT_SECRET: ${ssm:/aws/reference/secretsmanager/qr-ticketing-jwt}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/Users
            - arn:aws:dynamodb:${self:provider.region}:*:table/Users/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/Events
            - arn:aws:dynamodb:${self:provider.region}:*:table/Events/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/Tickets
            - arn:aws:dynamodb:${self:provider.region}:*:table/Tickets/index/*
            # S3 permissions for the Lambda that signs URLs / (optional) reads objects
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource:
            - arn:aws:s3:::${self:service}-${self:provider.stage}-uploads/*
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:service}-${self:provider.stage}-uploads
functions:
  getUsers:
    handler: handlers/users/getUsers.main
    events:
      - httpApi:
          path: /users
          method: GET

  createUser:
    handler: handlers/users/createUser.main
    events:
      - httpApi:
          path: /users
          method: POST

  loginUser:
    handler: handlers/users/loginUser.main
    events:
      - httpApi:
          path: /login
          method: POST
  createEvent:
    handler: handlers/events/createEvent.main
    events:
      - httpApi:
          path: /events
          method: POST
  getUploadUrl:
    handler: handlers/uploads/getUploadUrl.main
    events:
      - httpApi:
          path: /uploads/url
          method: POST
resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-uploads
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - http://localhost:3000
              AllowedMethods:
                - GET
                - PUT
                - HEAD
              AllowedHeaders:
                - "*"
              ExposedHeaders:
                - ETag
              MaxAge: 3000
